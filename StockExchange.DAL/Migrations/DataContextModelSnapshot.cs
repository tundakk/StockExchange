// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockExchange.DAL.DataModel;

#nullable disable

namespace StockExchange.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("StockExchange.DAL.DataModel.EodPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("ClosePrice")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("StockSymbolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("StockSymbolId");

                    b.ToTable("EodPrices");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ClosePrice = 10.14f,
                            Date = new DateTime(2022, 9, 1, 10, 19, 56, 270, DateTimeKind.Local).AddTicks(1238),
                            StockSymbolId = 1
                        },
                        new
                        {
                            ID = 2,
                            ClosePrice = 20.14f,
                            Date = new DateTime(2022, 9, 1, 10, 19, 56, 270, DateTimeKind.Local).AddTicks(1245),
                            StockSymbolId = 2
                        },
                        new
                        {
                            ID = 3,
                            ClosePrice = 30.14f,
                            Date = new DateTime(2022, 9, 1, 10, 19, 56, 270, DateTimeKind.Local).AddTicks(1251),
                            StockSymbolId = 3
                        });
                });

            modelBuilder.Entity("StockExchange.DAL.DataModel.Exchange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Exchanges");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IsActive = true,
                            Name = "The New York Stock Exchange"
                        },
                        new
                        {
                            ID = 2,
                            IsActive = true,
                            Name = "NASDAQ Stock Exchange"
                        },
                        new
                        {
                            ID = 3,
                            IsActive = false,
                            Name = "Bombay Stock Exchange"
                        });
                });

            modelBuilder.Entity("StockExchange.DAL.DataModel.StockSymbol", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Ticker")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ExchangeId");

                    b.ToTable("StockSymbols");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CompanyName = "Straton Oakmount",
                            ExchangeId = 1,
                            IsActive = false,
                            Ticker = new DateTime(2022, 9, 1, 10, 19, 56, 270, DateTimeKind.Local).AddTicks(1181)
                        },
                        new
                        {
                            ID = 2,
                            CompanyName = "Apple",
                            ExchangeId = 2,
                            IsActive = true,
                            Ticker = new DateTime(2022, 9, 1, 10, 19, 56, 270, DateTimeKind.Local).AddTicks(1190)
                        },
                        new
                        {
                            ID = 3,
                            CompanyName = "Alphabet",
                            ExchangeId = 3,
                            IsActive = true,
                            Ticker = new DateTime(2022, 9, 1, 10, 19, 56, 270, DateTimeKind.Local).AddTicks(1197)
                        });
                });

            modelBuilder.Entity("StockExchange.DAL.DataModel.EodPrice", b =>
                {
                    b.HasOne("StockExchange.DAL.DataModel.StockSymbol", "stockSymbol")
                        .WithMany("EodPrices")
                        .HasForeignKey("StockSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("stockSymbol");
                });

            modelBuilder.Entity("StockExchange.DAL.DataModel.StockSymbol", b =>
                {
                    b.HasOne("StockExchange.DAL.DataModel.Exchange", "Exchange")
                        .WithMany("StockSymbols")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("StockExchange.DAL.DataModel.Exchange", b =>
                {
                    b.Navigation("StockSymbols");
                });

            modelBuilder.Entity("StockExchange.DAL.DataModel.StockSymbol", b =>
                {
                    b.Navigation("EodPrices");
                });
#pragma warning restore 612, 618
        }
    }
}
